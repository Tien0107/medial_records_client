THAT IS FOR WTF :))


import React, { useState, useEffect } from "react";
import "./login_register.css";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { ethers } from "ethers";
import { MedicalRecordABI, MedicalRecordAddress } from "../contractConfig";

const LoginPage = () => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [walletAddress, setWalletAddress] = useState("");

  useEffect(() => {
    // Kiểm tra xem đã đăng nhập chưa
    const token = localStorage.getItem("access_token");
    const role = localStorage.getItem("user_role");
    if (token && role) {
      navigate(role === "doctor" ? "/doctor" : "/patient");
    }
  }, [navigate]);

  const connectWallet = async () => {
    try {
      if (!window.ethereum) {
        alert("Vui lòng cài đặt MetaMask!");
        return;
      }

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const accounts = await provider.send("eth_requestAccounts", []);
      const wallet = accounts[0];
      setWalletAddress(wallet);
      return wallet;
    } catch (error) {
      console.error("Lỗi kết nối ví:", error);
      alert("Kết nối ví thất bại!");
      return null;
    }
  };

  const handleLogin = async () => {
    try {
      setLoading(true);
      const wallet = await connectWallet();
      
      if (!wallet) {
        return;
      }

      // Kiểm tra đăng ký trên smart contract
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const contract = new ethers.Contract(MedicalRecordAddress, MedicalRecordABI, signer);

      const isPatient = await contract.isPatient(wallet);
      const isDoctor = await contract.isDoctor(wallet);

      if (!isPatient && !isDoctor) {
        alert("Ví của bạn chưa được đăng ký. Vui lòng đăng ký trước!");
        navigate("/register");
        return;
      }

      // Đăng nhập với backend
      const response = await axios.post("https://backend-medical-record.onrender.com/api/v1/auth/sign-in", {
        wallet: wallet
      });

      if (response.data.status === "success") {
        const { token, role } = response.data.data;
        
        // Lưu thông tin đăng nhập
        localStorage.setItem("access_token", token);
        localStorage.setItem("user_role", role);
        localStorage.setItem("wallet_address", wallet);

        // Chuyển hướng dựa vào role
        if (role === "doctor") {
          navigate("/doctor");
        } else {
          navigate("/patient");
        }
      } else {
        alert(response.data.message || "Đăng nhập thất bại!");
      }
    } catch (error) {
      console.error("Lỗi đăng nhập:", error);
      alert(error.response?.data?.message || "Đăng nhập thất bại!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="form-container">
      <div className="form">
        <span className="heading">Đăng Nhập</span>
        <span className="c2">
          {walletAddress 
            ? `Đã kết nối: ${walletAddress.substring(0, 6)}...${walletAddress.substring(38)}`
            : "Kết nối MetaMask để đăng nhập!"}
        </span>

        <div className="button-container">
          <button 
            className="send-button" 
            onClick={handleLogin}
            disabled={loading}
          >
            {loading ? "Đang đăng nhập..." : walletAddress ? "Đăng Nhập" : "Kết Nối Ví"}
          </button>
          <div className="reset-button-container">
            <button
              className="reset-button"
              onClick={() => navigate("/register")}
            >
              Đăng Ký
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LoginPage;
